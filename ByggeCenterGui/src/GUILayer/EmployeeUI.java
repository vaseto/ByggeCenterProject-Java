/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUILayer;

import ControlLayer.ContractorCtrl;
import ControlLayer.CustomerCtrl;
import ControlLayer.ItemsReorderCtrl;
import ControlLayer.ProductCtrl;
import ControlLayer.ProductSaleCtrl;
import ModelLayer.Contractor;
import ModelLayer.Customer;
import ModelLayer.Product;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyEvent;
import java.util.LinkedList;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;

/**
 *
 * @author viva
 */
public class EmployeeUI extends javax.swing.JFrame {

    private LoginMenu menu;
    private ManagerUI manUI;
    private ProductSaleCtrl prdSaleCtrl;
    private ProductCtrl prdCtrl;
    private Double tPrice;
    private SeeAll seeAll;
    public static EmployeeUI instance;
    private Customer cust;
    private CustomerCtrl custCtrl;
    private String diff;
    private LinkedList products;
    private Contractor cont;

    /**
     * Creates new form EmployeeUI
     */
    public static EmployeeUI getInstance() {
        if (instance == null) {
            instance = new EmployeeUI();
        } else if (instance.jPanel3.isVisible()) {
            instance.jPanel2.setVisible(false);
        } else {
            instance.jPanel2.setVisible(true);
        }
        return instance;
    }

    private EmployeeUI() {
        initComponents();
        prdSaleCtrl = new ProductSaleCtrl();
        prdCtrl = new ProductCtrl();
        tPrice = 0.0;
        jPanel3.setVisible(false);
        prepareCustCheckBox();
    }

    protected void setCont(Contractor contractor) {
        cont = contractor;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        removeItem = new javax.swing.JMenuItem();
        changeQuantityItem = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        saleButton = new javax.swing.JButton();
        custButton = new javax.swing.JButton();
        rentButt = new javax.swing.JButton();
        prdButt = new javax.swing.JButton();
        orderButt = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        machineButt = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        finishButt = new javax.swing.JButton();
        showAllBut = new javax.swing.JButton();
        barcodeField = new javax.swing.JTextField();
        barcodeLabel = new javax.swing.JLabel();
        quantityField = new javax.swing.JTextField();
        quantityLabel = new javax.swing.JLabel();
        addToSale = new javax.swing.JButton();
        list1 = new java.awt.List();
        jCheckBox1 = new javax.swing.JCheckBox();
        backButt = new javax.swing.JButton();
        showCustButt = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        removeItem.setText("Remove");
        removeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(removeItem);

        changeQuantityItem.setText("Change quantity");
        changeQuantityItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeQuantityItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(changeQuantityItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        saleButton.setText("Start sale");
        saleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saleButtonActionPerformed(evt);
            }
        });
        saleButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saleButtonKeyPressed(evt);
            }
        });

        custButton.setText("Customers menu");
        custButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custButtonActionPerformed(evt);
            }
        });

        rentButt.setText("Rent menu");
        rentButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentButtActionPerformed(evt);
            }
        });

        prdButt.setText("Products menu");
        prdButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prdButtActionPerformed(evt);
            }
        });

        orderButt.setText("Order menu");
        orderButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderButtActionPerformed(evt);
            }
        });

        backButton.setText("Log out");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        machineButt.setText("Machines menu");
        machineButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                machineButtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(126, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(saleButton)
                    .addComponent(custButton)
                    .addComponent(rentButt)
                    .addComponent(prdButt)
                    .addComponent(machineButt, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orderButt)
                    .addComponent(backButton))
                .addGap(209, 209, 209))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {backButton, custButton, machineButt, orderButt, prdButt, rentButt, saleButton});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(saleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(custButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rentButt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(prdButt)
                .addGap(10, 10, 10)
                .addComponent(machineButt)
                .addGap(13, 13, 13)
                .addComponent(orderButt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(backButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        finishButt.setText("Finish sale");
        finishButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishButtActionPerformed(evt);
            }
        });

        showAllBut.setText("Show products");
        showAllBut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllButActionPerformed(evt);
            }
        });

        barcodeField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                barcodeFieldKeyPressed(evt);
            }
        });

        barcodeLabel.setText("Barcode:");

        quantityField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quantityFieldActionPerformed(evt);
            }
        });
        quantityField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                quantityFieldKeyPressed(evt);
            }
        });

        quantityLabel.setText("Quantity:");

        addToSale.setText("Add product");
        addToSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToSaleActionPerformed(evt);
            }
        });
        addToSale.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                addToSaleKeyPressed(evt);
            }
        });

        list1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                list1MouseClicked(evt);
            }
        });
        list1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                list1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Registered customer");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        backButt.setText("Back");
        backButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtActionPerformed(evt);
            }
        });

        showCustButt.setText("Show customers");
        showCustButt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showCustButtActionPerformed(evt);
            }
        });

        jButton1.setText("Clear all");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(showAllBut, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(showCustButt, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(finishButt)
                        .addGap(18, 18, 18)
                        .addComponent(backButt)
                        .addGap(69, 69, 69))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(list1, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(barcodeField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(barcodeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(47, 47, 47)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(quantityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(46, 46, 46)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton1)
                                            .addComponent(addToSale)))))
                            .addComponent(jCheckBox1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(addToSale)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityLabel)
                            .addComponent(barcodeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(barcodeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(list1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showAllBut)
                    .addComponent(finishButt)
                    .addComponent(showCustButt)
                    .addComponent(backButt))
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(620, 620, 620))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(308, 308, 308))
        );

        getContentPane().add(jPanel1, "card2");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saleButtonActionPerformed
        saleButton("");
    }//GEN-LAST:event_saleButtonActionPerformed
    protected boolean saleButton(String str) {
        if (str.length() < 2) {
            diff = str;
            jPanel2.setVisible(false);
            jPanel3.setVisible(true);
            finishButt.setText("Finish Sale");
            showCustButt.setText("Show customers");
            showAllBut.setText("Products ");
            quantityLabel.setText("Quantity ");
            return true;
        } else {
            diff = str;
            jPanel2.setVisible(false);
            jPanel3.setVisible(true);
            jCheckBox1.setVisible(false);
            finishButt.setText("Finish Order");
            showCustButt.setText("Show contractors");
            showAllBut.setText("Products for reordering");
            quantityLabel.setText("Quantity to reorder");
            return false;
        }
    }

    protected JPanel getSalePanel() {
        return jPanel3;
    }

    private void custButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custButtonActionPerformed
        openManUI(evt);
        manUI.setWhichMenu("emp");
    }//GEN-LAST:event_custButtonActionPerformed

    private void rentButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentButtActionPerformed
        GUIRent rent = new GUIRent();
        this.dispose();
        rent.main(null);
    }//GEN-LAST:event_rentButtActionPerformed

    private void prdButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prdButtActionPerformed
        openManUI(evt);
        manUI.setWhichMenu("emp");
    }//GEN-LAST:event_prdButtActionPerformed

    private void orderButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderButtActionPerformed
        OrderMenu order = new OrderMenu();
        this.dispose();
        order.main(null);
    }//GEN-LAST:event_orderButtActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.setVisible(false);
        menu = new LoginMenu();
        menu.setSize(this.getSize());
        menu.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed
    private void fillList(Product pr, int quantity, double price) {
        list1.add("Product " + pr.getName() + " | " + "Quantity " + quantity + " | Price " + pr.getPrice() + "  Total price: " + price + " ");
    }

    protected JTextField getQuantityField() {
        return quantityField;
    }

    protected JTextField getBarcodeField() {
        return barcodeField;
    }

    private double getPriceFromList(String found) {
        String totPrice = found.substring(found.indexOf("price: "));
        totPrice = totPrice.substring(totPrice.indexOf(" "));
        return Double.parseDouble(totPrice);
    }

    private Product getProductFromList(String found) {
        String newStr = null;
        newStr = found.substring(found.indexOf("Product "), found.indexOf(" | "));
        newStr = newStr.substring(newStr.indexOf(" ")).trim();
        return prdCtrl.getProductByName(newStr);
    }

    private void adjustSoldQuantity() {
        for (String str : list1.getItems()) {
            if (!str.contains("Total price : ")) {
                getProductFromList(str).setSoldProducts(getQuantityFromList(str));
            }
        }
    }

    private int getQuantityFromList(String found) {
        String newQuantity = null;
        try{
                newQuantity = found.substring(found.indexOf("Quantity"), found.indexOf(" | Price"));
        }catch(Exception e){
            newQuantity = found.substring(found.indexOf("Quantity "), found.indexOf(" | Quantity to be reordered "));
        }
         newQuantity = newQuantity.substring(newQuantity.indexOf(" ")).trim();
        return Integer.parseInt(newQuantity);
    }

    private void checkBeforeAddToSale(Product pr, double price, int quantity) {
        if (pr != null) {
            price = prdSaleCtrl.enterItem(pr, quantity);
            if (price == -1) {
                JOptionPane.showMessageDialog(null, "There are not enough products to finish this sale", "Not enough products",
                        JOptionPane.ERROR_MESSAGE);
            } else {
                tPrice = tPrice + price;
                String items[] = list1.getItems();
                if (items.length > 0) {
                    list1.remove(list1.getItemCount() - 1);
                }
                String found = checkListForDuplicates(pr);
                if (found != null) {
                    list1.remove(found);
                    fillList(pr, (quantity + getQuantityFromList(found)), (getPriceFromList(found) + price));
                } else {
                    fillList(pr, quantity, price);
                }
                list1.add("Total price : " + tPrice, list1.getItemCount() + 1);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Product with that id hasn't been found", "Wrong field",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fillList(Product pr, int quantity) {
        list1.add("Product " + pr.getName() + " | " + "Quantity " + pr.getQuantity() + " | Quantity to be reordered " + quantity
                + " | Quantity after reordering " + (pr.getQuantity() + quantity));
    }

    private String checkListForDuplicates(Product pr) {
        String found = null;
        String items[] = list1.getItems();
        for (String str1 : items) {
            if (str1.contains(pr.getName())) {
                found = str1;
                return found;
            }
        }
        return found;
    }

    private int getPreviousQuantityFromList(String found) {
        found = found.substring(found.indexOf("reordered "), found.indexOf(" | Quantity after reordering"));
        found = found.substring(found.indexOf(" ")).trim();
        System.out.println(found);
        return Integer.parseInt(found);
    }

    private void checkBeforeAddToOrder(Product pr, int quantity) {
        ItemsReorderCtrl itemsRe = new ItemsReorderCtrl();
        if (pr != null) {
            String found = checkListForDuplicates(pr);
            if (found != null) {
                list1.remove(found);
                fillList(pr, (quantity + getPreviousQuantityFromList(found)));
            } else if (!itemsRe.enterItemForReorder(pr, quantity)) {
                fillList(pr, quantity);
            } else {
                int s = JOptionPane.showConfirmDialog(rootPane, "The product you want to reoder is going to exceed the maximum amount you have given to be kept in stock. "
                        + "If still want to reoder it press Yes ");
                switch (s) {
                    case JOptionPane.NO_OPTION:
                    case JOptionPane.CANCEL_OPTION:
                        break;
                    case JOptionPane.YES_OPTION:
                        fillList(pr, quantity);
                        break;
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Product with that id hasn't been found", "Wrong field",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void addToSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToSaleActionPerformed
        addToSale();
    }//GEN-LAST:event_addToSaleActionPerformed

    private TreeMap<Product,Integer> getFromList() {
        TreeMap<Product, Integer> map = new TreeMap();
        for (String str : list1.getItems()) {
            if (!str.contains("Total price : ")) {
                map.put(getProductFromList(str), getQuantityFromList(str));
            }
        }
        return map;
    }
    
    private TreeMap<Product,Integer> getReorderFromList(){
        TreeMap<Product, Integer> map = new TreeMap();
        for (String str : list1.getItems()) {
            if (!str.contains("Total price : ")) {
                map.put(getProductFromList(str), getPreviousQuantityFromList(str));
            }
    }
         return map;
    }

    private double payAndFinishSale(String showSum) {
        double change = -1;
        try {
            change = custCtrl.makePayment(tPrice, Integer.parseInt(showSum));
            prdSaleCtrl.makeSale(LoginMenu.emp, cust, getFromList(), cust.getGroup().getDiscount());
            adjustSoldQuantity();
            JOptionPane.showMessageDialog(null, "Customer change is " + change);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Number must be presented");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Not enough money to finish the sale");
        }
        return change;
    }

    private void addToSale() {
        String barcode = barcodeField.getText();
        products = new LinkedList();
        double price = -1;
        try {
            int quantity = Integer.parseInt(quantityField.getText());
            Product pr = prdCtrl.getItem(barcode);
            if (saleButton(diff)) {
                checkBeforeAddToSale(pr, price, quantity);
            } else {
                checkBeforeAddToOrder(pr, quantity);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Number must be written", "Wrong field",
                    JOptionPane.ERROR_MESSAGE);
        }

        quantityField.setText("");
        barcodeField.setText("");
    }
    private void quantityFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quantityFieldActionPerformed

    }//GEN-LAST:event_quantityFieldActionPerformed

    private void list1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_list1ActionPerformed

    }//GEN-LAST:event_list1ActionPerformed

    private void showAllButActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllButActionPerformed
        seeAll = new SeeAll();
        seeAll.setSize(this.getSize());
        seeAll.setDifference("s");
        if (saleButton(diff)) {
            seeAll.addToList("products");
        } else {
            seeAll.addToList("Products for reordering");
        }
        seeAll.setVisible(true);
    }//GEN-LAST:event_showAllButActionPerformed

    private void prepareForNewSale() {
        list1.removeAll();
        tPrice = 0.0;
        cust = null;
    }
    private void finishButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishButtActionPerformed
        if (saleButton(diff)) {
            finishSale();
        } else if (cont != null) {
            TreeMap<Product,Integer> map = getReorderFromList();
            for(Map.Entry<Product,Integer> entry : map.entrySet()){
                cont.getRequestForReorder().put(entry.getKey(),entry.getValue());
            }  
            ContractorCtrl contCtrl = new ContractorCtrl();
            contCtrl.save(contCtrl.getFileName(),contCtrl.getContractors());
            JOptionPane.showMessageDialog(null,"Request succesfully send ");
            list1.removeAll();
            cont = null;
        } else {
            JOptionPane.showMessageDialog(null, "You have to chose contractor first");
        }
    }//GEN-LAST:event_finishButtActionPerformed
    private void finishOrder() {
        int s = JOptionPane.showConfirmDialog(null, "You are about to make request for stok to " + cont + ". Do you wish to continue ?");
        switch (s) {
            case JOptionPane.NO_OPTION:
            case JOptionPane.CANCEL_OPTION:
                break;
            case JOptionPane.YES_OPTION:

                break;
        }
    }

    private void saleButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saleButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            saleButton("");
        }
    }//GEN-LAST:event_saleButtonKeyPressed
    private void finishSale() {
        custCtrl = new CustomerCtrl();
        if (cust == null) {
            cust = custCtrl.findCustomerByName("Default");
        }
        if (list1.getItemCount() > 0) {
            int s = JOptionPane.showConfirmDialog(null, "Should a special discount be applied ?");
            switch (s) {
                case JOptionPane.CANCEL_OPTION:
                    break;
                case JOptionPane.NO_OPTION:
                    tPrice = prdSaleCtrl.applyDiscount(tPrice, cust.getGroup().getDiscount());
                    String showSum = JOptionPane.showInputDialog(null, "Total price after discount " + tPrice, "Enter customer payment sum");
                    payAndFinishSale(showSum);
                    prepareForNewSale();
                    break;
                case JOptionPane.YES_OPTION:
                    String str = JOptionPane.showInputDialog("Write the % of discount");
                    try {
                        int x = Integer.parseInt(str);
                        if (prdSaleCtrl.checkDiscount(x)) {
                            tPrice = prdSaleCtrl.applyDiscount(tPrice, x);
                            showSum = JOptionPane.showInputDialog(null, "Total price after discount" + tPrice, "Enter customer payment sum");
                            payAndFinishSale(showSum);
                            prepareForNewSale();
                        } else {
                            JOptionPane.showMessageDialog(null, "Discount cannot exceed 20%");
                        }
                    } catch (NumberFormatException nfe) {
                        JOptionPane.showMessageDialog(null, "Number must be presented");
                    }
                    break;
            }
        }
    }
    private void quantityFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_quantityFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addToSale();
        }
    }//GEN-LAST:event_quantityFieldKeyPressed

    private void barcodeFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addToSale();
        }
    }//GEN-LAST:event_barcodeFieldKeyPressed

    private void addToSaleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addToSaleKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addToSale();
        }
    }//GEN-LAST:event_addToSaleKeyPressed

    private void changeQuantityItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeQuantityItemActionPerformed
        String str = list1.getSelectedItem();
        String found = null;
        LinkedList products = new LinkedList();
        if (!str.equals("") && !str.contains("Total price : ")) {
            String newQuantity = JOptionPane.showInputDialog("Write the new quantity of the selected product");
            try {
                int index = Integer.parseInt(newQuantity);
                list1.remove(str);
                tPrice = tPrice - getPriceFromList(str);
                String name = str.substring(str.indexOf("Product "), str.indexOf(" |")).trim();
                name = name.substring(name.indexOf(" ")).trim();
                Product pr = prdCtrl.getProductByName(name);
                checkBeforeAddToSale(pr, -1, index);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Number must be presented");
            }
        }
    }//GEN-LAST:event_changeQuantityItemActionPerformed

    private void removeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeItemActionPerformed
        String str = list1.getSelectedItem();
        if (!str.equals("") && !str.contains("Total price : ")) {
            if (list1.getItemCount() == 2) {
                list1.removeAll();
                tPrice = 0.0;
            } else {
                list1.remove(list1.getItemCount() - 1);
                list1.remove(str);
                tPrice = tPrice - getPriceFromList(str);
                list1.add("Total price : " + tPrice, list1.getItemCount() + 1);
            }
        }
    }//GEN-LAST:event_removeItemActionPerformed

    private void list1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_list1MouseClicked
        if (list1.getItemCount() != 0) {
            if (SwingUtilities.isRightMouseButton(evt)) {
                String str1 = evt.getSource().toString();
                str1 = str1.substring(str1.indexOf("="), str1.indexOf("]"));
                str1 = str1.substring(1);
                if (str1 != null && str1.contains(getProductFromList(str1).getName())) {
                    jPopupMenu1.show(list1, 535, evt.getY());
                }
            }
        }
    }//GEN-LAST:event_list1MouseClicked
    private Customer prepareCustCheckBox() {
        CustomerCtrl custCtrl = new CustomerCtrl();
        jCheckBox1.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == 1) {
                    String showInputDialog = JOptionPane.showInputDialog(null, "Input customer id",
                            JOptionPane.INFORMATION_MESSAGE);
                    cust = custCtrl.findCustomer(showInputDialog);
                    if (cust == null) {
                        JOptionPane.showMessageDialog(null, "No customer with that id");
                    }
                }

            }
        });
        return cust;
    }

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed

    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void backButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtActionPerformed
        if (diff.length() < 2) {
            jPanel2.setVisible(true);
            jPanel3.setVisible(false);
            this.update(this.getGraphics());
            this.repaint();
        } else {
            this.setVisible(false);
        }
        list1.removeAll();
        barcodeField.setText("");
        quantityField.setText("");
    }//GEN-LAST:event_backButtActionPerformed

    private void machineButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_machineButtActionPerformed
        MachineMenu machine = new MachineMenu();
        machine.setIndexTwo(3);
        this.dispose();
        machine.main(null);
    }//GEN-LAST:event_machineButtActionPerformed

    public Customer getCust() {
        return cust;
    }

    public void setCust(Customer cust) {
        this.cust = cust;
    }

    private void showCustButtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showCustButtActionPerformed
        seeAll = new SeeAll();
        seeAll.setDifference("diff");
        seeAll.setSize(this.getSize());
        if (saleButton(diff)) {
            seeAll.addToList("customers");
        } else {
            seeAll.addToList("contractors");
            seeAll.setDifference("cont");
        }
        seeAll.setVisible(true);
    }//GEN-LAST:event_showCustButtActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        list1.removeAll();
    }//GEN-LAST:event_jButton1ActionPerformed
    private void openManUI(ActionEvent evt) {
        manUI = new ManagerUI();
        manUI.setSize(this.getSize());
        manUI.showOthers(evt);
        manUI.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToSale;
    private javax.swing.JButton backButt;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField barcodeField;
    private javax.swing.JLabel barcodeLabel;
    private javax.swing.JMenuItem changeQuantityItem;
    private javax.swing.JButton custButton;
    private javax.swing.JButton finishButt;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupMenu1;
    private java.awt.List list1;
    private javax.swing.JButton machineButt;
    private javax.swing.JButton orderButt;
    private javax.swing.JButton prdButt;
    private javax.swing.JTextField quantityField;
    private javax.swing.JLabel quantityLabel;
    private javax.swing.JMenuItem removeItem;
    private javax.swing.JButton rentButt;
    private javax.swing.JButton saleButton;
    private javax.swing.JButton showAllBut;
    private javax.swing.JButton showCustButt;
    // End of variables declaration//GEN-END:variables
}
