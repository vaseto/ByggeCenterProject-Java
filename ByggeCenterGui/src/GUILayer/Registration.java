/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUILayer;

import java.awt.HeadlessException;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JOptionPane;
import javax.swing.JTextField;

import ControlLayer.ContractorCtrl;
import ControlLayer.CustomerCtrl;
import ControlLayer.EmployeeCtrl;
import ControlLayer.MachineCtrl;
import ControlLayer.PersonCtrl;
import ControlLayer.ProductCtrl;
import ModelLayer.Contractor;
import ModelLayer.Customer;
import ModelLayer.Employee;
import ModelLayer.Group;
import ModelLayer.Machine;
import ModelLayer.Person;
import ModelLayer.Product;

/**
 *
 * @author viva
 */
public class Registration extends javax.swing.JFrame {

    private EmployeeCtrl empCtrl;
    private CustomerCtrl custCtrl;
    private ContractorCtrl contCtrl;
    private ProductCtrl prdCtrl;
    private MachineCtrl machCtrl;
    private JTextField[] fields;
    private ArrayList customers;
    private ArrayList employees;
    private ArrayList contractors;
    private ArrayList<Product> products;
    private String representative;
    private ArrayList<String> positions;
    private PersonCtrl psCtrl;
    private String necess;
    private SeeAll seeAll;

    /**
     * Creates new form Registration
     */
    public Registration() {
        initComponents();
        fields = new JTextField[]{nameField, addressField, phoneField, emailField, bankAccField, salaryField, billField, additionalField};
        empCtrl = new EmployeeCtrl();
        custCtrl = new CustomerCtrl();
        contCtrl = new ContractorCtrl();
        prdCtrl = new ProductCtrl();
        machCtrl = new MachineCtrl();
        products = prdCtrl.getProducts();
        customers = custCtrl.getCustomers();
        employees = empCtrl.getEmployees();
        if (this.isVisible()) {
            fillRemoveButton();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        infoText = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        addressField = new javax.swing.JTextField();
        phoneField = new javax.swing.JTextField();
        emailField = new javax.swing.JTextField();
        bankAccField = new javax.swing.JTextField();
        salaryField = new javax.swing.JTextField();
        positionChoice = new java.awt.Choice();
        proceedButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        phoneLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        bankLabel = new javax.swing.JLabel();
        salaryLabel = new javax.swing.JLabel();
        backButton = new javax.swing.JButton();
        billField = new javax.swing.JTextField();
        billLabel = new javax.swing.JLabel();
        LocationChoice = new java.awt.Choice();
        additionalField = new javax.swing.JTextField();
        additionalLabel = new javax.swing.JLabel();
        removeButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        infoText.setText("Registration of employee");

        proceedButton.setText("Proceed");
        proceedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proceedButtonActionPerformed(evt);
            }
        });

        nameLabel.setText("Name:");

        addressLabel.setText("Address:");

        phoneLabel.setText("Phone:");

        emailLabel.setText("Email:");

        bankLabel.setText("Bank Account:");

        salaryLabel.setText("Salary:");

        backButton.setText("Go back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        billLabel.setText("Bill amount:");

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        jButton1.setText("See orders");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(infoText, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(phoneField)
                                .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                                .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(phoneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bankAccField, javax.swing.GroupLayout.Alignment.TRAILING))
                            .addComponent(salaryLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bankLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(emailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(proceedButton)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(emailField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                                            .addComponent(addressField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                                            .addComponent(positionChoice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                                            .addComponent(LocationChoice, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jButton1)))
                                .addGap(206, 206, 206))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(salaryField, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(billLabel)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(additionalLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(additionalField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(billField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(removeButton)
                            .addComponent(backButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoText, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(addressLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneLabel)
                    .addComponent(emailLabel))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bankLabel)
                    .addComponent(positionChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bankAccField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(salaryLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(salaryField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(billLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(billField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(additionalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(additionalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(LocationChoice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(proceedButton)
                            .addComponent(backButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(removeButton)
                            .addComponent(jButton1))))
                .addContainerGap(132, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void proceedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proceedButtonActionPerformed
        if (checkFields()) {
            changeName();
            if (proceedButton.getText().equals("Proceed")) {
                Register();
            } else {
                switch (representative) {
                    case "employees":
                        saveChangesToEmployee(necess);
                        break;
                    case "customers":
                        saveChangesToCustomer(necess);
                        break;
                    case "contractors":
                        saveChangesToContractor(necess);
                        break;
                    case "products":
                    case "Products for reordering":
                        saveChangesToProduct(necess);
                }
                if (!representative.equals("contractors")) {
                    JOptionPane.showMessageDialog(null, "Changes made successfuly", "Changes saved",
                            JOptionPane.INFORMATION_MESSAGE);
                }
                this.setVisible(false);
            }
        } else {
            JOptionPane.showMessageDialog(null, "All fields must be completed", "Empty field",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_proceedButtonActionPerformed
    private void saveChangesToProduct(String id) {
        Product pr = prdCtrl.getItem(id);
        try {
            if (Integer.parseInt(phoneField.getText()) != pr.getQuantity()) {
                int index = JOptionPane.showConfirmDialog(null, "You are about to change a quantity of a product therefore you should choose a contractor from which to order");
                switch (index) {
                    case JOptionPane.YES_OPTION:
                        seeAll = new SeeAll();
                        seeAll.addToList("contractors");
                        seeAll.setSize(this.getSize());
                        seeAll.setVisible(true);
                }
            }
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, "Number must be presented");
        }
    }
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        switch (representative) {
            case "employees":
                empCtrl.removePerson(necess, employees, empCtrl.getFileName());
                break;
            case "customers":
                custCtrl.removePerson(necess, customers, custCtrl.getFileName());
                break;
            case "contractors":
                contCtrl.removePerson(necess, contractors, contCtrl.getFileName());
                break;
            case "products":
                prdCtrl.removeItem(necess);
                break;
            case "machines":
                machCtrl.removeItem(necess);
                break;
        }
        this.setVisible(false);
        JOptionPane.showMessageDialog(null, "Changes made successfuly", "Changes saved",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_removeButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        seeAll = new SeeAll();
        seeAll.setId(bankAccField.getText());
        seeAll.addToList("orders");
        seeAll.setSize(this.getSize());
        seeAll.setVisible(true);
        System.out.println(contCtrl.findContractor(necess).getRequestForReorder());
    }//GEN-LAST:event_jButton1ActionPerformed
    private boolean checkFields() {
        boolean empty = false;
        for (JTextField field : fields) {
            if (field.isVisible()) {
                empty = field.getText().length() > 0;
                if (empty == false) {
                    return empty;
                }
            }
        }
        return empty;
    }

    protected void changeName() {
        if (additionalField.isVisible() || representative.equals("Products for reordering")) {
            proceedButton.setText("Save changes");
        }
    }

    private void Register() {
        if (checkFields()) {
            switch (representative) {
                case "employees":
                    registerEmployee();
                    break;
                case "customers":
                    registerCustomer();
                    break;
                case "contractors":
                    registerContractor();
                    break;
                case "products":
                    registerProduct();
                    break;
                case "machines":
                    registerMachine();
                    break;
            }
        } else {
            JOptionPane.showMessageDialog(null, "All fields have to be filled up");
        }
    }

    private void fillRemoveButton() {
        removeButton.setText(removeButton.getText() + representative);
    }

    private void registerEmployee() {
        try {
            Employee emp = empCtrl.createEmployee(fields[0].getText(), fields[1].getText(), fields[2].getText(), fields[3].getText(), fields[4].getText(), positionChoice.getSelectedItem(),
                    Double.parseDouble(fields[5].getText()), employees);
            JOptionPane.showMessageDialog(null, "The login name is " + emp.getLoginName() + " The password is " + emp.getPassword(), "Succesfull registration",
                    JOptionPane.INFORMATION_MESSAGE);
            clearFields();
        } catch (NumberFormatException | HeadlessException | StringIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Salary and phone have to be writen with numbers. The phone should have atleast 6 numbers", "Wrong field",
                    JOptionPane.ERROR_MESSAGE);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "The login name is not free", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void makeGroup() {

    }

    private void registerCustomer() {
        try {
            if (customers.isEmpty()) {
                Group group = new Group("group", 0);
                customers.add(custCtrl.createCustomer("Default", "Default", "Default", "Default", group, 0, "fasfsa", 0, customers));
            }
            Customer cust = custCtrl.createCustomer(fields[0].getText(), fields[1].getText(), fields[2].getText(), fields[3].getText(),
                    getGroup(), Double.parseDouble(fields[5].getText()), fields[4].getText(), Double.parseDouble(fields[6].getText()), customers);
            JOptionPane.showMessageDialog(null, "Customer " + fields[0].getText() + " with Id " + cust.getID() + " successfully created", "Succesfull registration",
                    JOptionPane.INFORMATION_MESSAGE);
            clearFields();
        } catch (NumberFormatException | HeadlessException | StringIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Customer balance and bill have to be writen with numbers", "Wrong field",
                    JOptionPane.ERROR_MESSAGE);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "SMth went wrong", "", JOptionPane.INFORMATION_MESSAGE);
            System.out.println(custCtrl.getCustomers().toString());
        }
    }

    private void registerContractor() {
        try {
            Contractor cont = contCtrl.createContractor(fields[0].getText(), fields[1].getText(), fields[2].getText(), fields[3].getText(), contCtrl.getContractors());
            JOptionPane.showMessageDialog(null, "Contractor " + fields[0].getText() + " with Id " + cont.getID() + " successfully created", "Succesfull registration",
                    JOptionPane.INFORMATION_MESSAGE);
            clearFields();
        } catch (StringIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "SMth went wrong", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void registerProduct() {
        try {
            int min = Integer.parseInt(fields[3].getText());
            int max = Integer.parseInt(fields[4].getText());
            Product product = prdCtrl.createItem(fields[0].getText(), Double.parseDouble(fields[1].getText()), Integer.parseInt(fields[2].getText()), positionChoice.getSelectedItem(),
                    LocationChoice.getSelectedItem(), min, max);
            if (max > min) {
                JOptionPane.showMessageDialog(null, "Product " + fields[0].getText() + "with barcode number " + product.getBarcode() + " successfully created", "Succesfull registration",
                        JOptionPane.INFORMATION_MESSAGE);
                clearFields();
            } else {
                JOptionPane.showMessageDialog(null, "The desired maximum amount should be more than the minumum amount", "Unsuccesfull registration",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException | HeadlessException | StringIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Fields have to be written with numbers", "Wrong field",
                    JOptionPane.ERROR_MESSAGE);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "SMth went wrong", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void registerMachine() {
        try {
            Machine ma = machCtrl.createItem(fields[0].getText(), Double.parseDouble(fields[1].getText()), Integer.parseInt(fields[2].getText()), positionChoice.getSelectedItem());
            JOptionPane.showMessageDialog(null, "Machine " + fields[0].getText() + "with barcode number " + ma.getBarcode() + " successfully created", "Succesfull registration",
                    JOptionPane.INFORMATION_MESSAGE);
            clearFields();
        } catch (NumberFormatException | HeadlessException | StringIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Fields have to be written with numbers", "Wrong field",
                    JOptionPane.ERROR_MESSAGE);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "SMth went wrong", "", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void clearFields() {
        for (JTextField field : fields) {
            field.setText("");
        }
    }

    private Group getGroup() {
        ArrayList<Group> lis = getGroups();
        for (Group gr : lis) {
            if (gr.getName().equals(positionChoice.getSelectedItem())) {
                return gr;
            }
        }
        return null;
    }

    protected ArrayList<String> getPositins(String fileName) {
        ObjectInputStream input = null;
        String groups = null;
        try {
            input = new ObjectInputStream(new FileInputStream(fileName));
            try {
                positions = (ArrayList) input.readObject();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Person.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (EOFException | FileNotFoundException | NullPointerException e) {
            System.out.println(e);
            try {
                input.close();
            } catch (IOException | NullPointerException ex) {
                System.out.println(ex);
            }
        } catch (IOException ex) {
            System.out.println(ex);
        }
        return positions;
    }

    protected ArrayList<Group> getGroups() {
        ObjectInputStream input = null;
        ArrayList<Group> groups = new ArrayList<>();
        try {
            input = new ObjectInputStream(new FileInputStream("Groups.ser"));
            try {
                groups = (ArrayList) input.readObject();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Person.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (EOFException | FileNotFoundException | NullPointerException e) {
            System.out.println(e);
            try {
                input.close();
            } catch (IOException | NullPointerException ex) {
                System.out.println(ex);
            }
        } catch (IOException ex) {
            System.out.println(ex);
        }
        return groups;
    }

    protected void checkRegistration(String str) {
    	
        positionChoice.removeAll();
        LocationChoice.removeAll();
        boolean show = false;
        representative = str;
        removeButton.setVisible(false);
        switch (str) {
            case "employees":
            	try{
                hideForEmployee();
                jButton1.setVisible(false);
                    positionChoice.add("Manager");
                    positionChoice.add("Employee");
                    for (String sr : getPositins("Positions.ser")) {
                        positionChoice.add(sr);
                    }
                show = true;
                break;
            	
            	}catch(Exception ex	){
            		ex.printStackTrace();
            	}
            case "customers":
                jButton1.setVisible(false);
                ArrayList list = getPositins("Groups.ser");
               
                    for (Group gr : getGroups()) {
                        positionChoice.add(gr.getName());
                    }
                    show = true;
                    billField.setVisible(true);
                    billLabel.setVisible(true);
                    additionalField.setVisible(false);
                    LocationChoice.setVisible(false);
                    salaryLabel.setText("Balance");
                    bankLabel.setText("Credit card No");
                
                break;
            case "contractors":
                hideForContractor();
                positionChoice.setVisible(false);
                break;
            case "products":
                jButton1.setVisible(false);
                ArrayList<String> lis = getPositins("ProductCategories.ser");
                if (lis == null) {
                    JOptionPane.showMessageDialog(null, "You first have to create positions", "Wrong field",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    for (String ste : lis) {
                        positionChoice.add(ste);
                    }
                    hideForEmployee();
                    LocationChoice.add("TimberYard");
                    LocationChoice.add("ByggeCenter");
                    LocationChoice.setVisible(true);
                    salaryField.setVisible(false);
                    salaryLabel.setVisible(false);
                    addressLabel.setText("Price");
                    phoneLabel.setText("Quantity");
                    emailLabel.setText("Minimum amount to be kept in stock");
                    bankLabel.setText("Maximum amount to be kept in stock");
                    show = true;
                }

                break;
            case "machines":
                jButton1.setVisible(false);
                ArrayList<String> li = getPositins("Machine Categories.ser");
                if (li == null) {
                    JOptionPane.showMessageDialog(null, "You first have to create positions", "Wrong field",
                            JOptionPane.ERROR_MESSAGE);
                } else {
                    for (String st : li) {
                        positionChoice.add(st);
                    }
                    show = true;
                    hideForContractor();
                    emailField.setVisible(false);
                    emailLabel.setVisible(false);
                    addressLabel.setText("Price per day");
                    phoneLabel.setText("Quantity");
                    LocationChoice.add("TimberYard");
                    LocationChoice.add("ByggeCenter");
                    LocationChoice.setVisible(true);
                    positionChoice.setVisible(true);
                }
                break;
        }
        if (show == true) {
            show(str);
        }
    	
    }

    private void checkFound(String str) {
        switch (str) {
            case "employees":
                LocationChoice.setVisible(false);
                salaryLabel.setText("Salary");
                billLabel.setText("Id");
                additionalLabel.setText("Login name");
                break;
            case "customers":
                bankLabel.setText("CreditCard No");
                salaryLabel.setText("Balance");
                LocationChoice.setVisible(false);
                additionalLabel.setText("Id");
                break;
            case "contractors":
                hideForContractor();
                bankLabel.setText("Id");
                bankLabel.setVisible(true);
                bankAccField.setVisible(true);
                break;
            case "products":
            case "Products for reordering":
                addressLabel.setText("Price");
                phoneLabel.setText("Quantity");
                emailLabel.setText("Minimum amount to be kept in stock");
                bankLabel.setText("Minimum amount to be kept in stock");
                salaryLabel.setText("Barcode");
                bankLabel.setVisible(true);
                billLabel.setVisible(false);
                billField.setVisible(false);
                additionalField.setVisible(false);
                break;
            case "machines":
                addressLabel.setText("Price per day");
                phoneLabel.setText("Quantity");
                emailLabel.setText("Barcode number");
                hideForContractor();
                LocationChoice.add("TimberYard");
                LocationChoice.add("ByggeCenter");
                positionChoice.setVisible(true);
        }
    }

    private void show(String str) {
        infoText.setText(getInfoLabelText() + " " + str);
        representative = str;
        this.setVisible(true);
    }

    protected void fillFieldsWhenFound(String str, String id) {
        checkFound(str);
        boolean show = false;
        switch (str) {
            case "employees":
                Employee emp = empCtrl.findEmployee(id);
                if (emp != null) {
                    necess = id;
                    show = true;
                    setText(emp);
                    positionChoice.add(emp.getPosition());
                    bankLabel.setText("Bank accounts");
                    bankAccField.setText(emp.getBankAcc());
                    System.out.println(emp.getBankAcc());
                    billField.setText(id);
                    salaryField.setText(emp.getSalary() + "");
                    additionalField.setText(emp.getLoginName());
                    billField.setEditable(false);
                    additionalField.setEditable(false);
                    jButton1.setVisible(false);
                } else {
                    JOptionPane.showMessageDialog(null, "No employee with that id has been found", "No results",
                            JOptionPane.ERROR_MESSAGE);
                }
                break;
            case "customers":
                Customer cust = custCtrl.findCustomer(id);
                if (cust != null) {
                    show = true;
                    necess = id;
                    setText(cust);
                    fields[4].setText(cust.getCreditCardNo());
                    fields[5].setText(cust.getBalance() + "");
                    fields[6].setText(cust.getBill() + "");
                    positionChoice.add(cust.getGroup().toString());
                    jButton1.setVisible(false);
                } else {
                    JOptionPane.showMessageDialog(null, "No customer with that id has been found", "No results",
                            JOptionPane.ERROR_MESSAGE);
                }
                break;
            case "contractors":
                Contractor cont = contCtrl.findContractor(id);
                if (cont != null) {
                    show = true;
                    necess = id;
                    setText(cont);
                    fields[4].setText(cont.getID());
                    fields[4].setEditable(false);
                    proceedButton.setText("Save changes");
                } else {
                    JOptionPane.showMessageDialog(null, "No customer with that id has been found", "No results",
                            JOptionPane.ERROR_MESSAGE);
                }
                break;
            case "products":
            case "Products for reordering":
                Product prd = prdCtrl.getItem(id);
                if (prd != null) {
                    show = true;
                    necess = id;
                    fields[0].setText(prd.getName());
                    fields[1].setText(prd.getPrice() + "");
                    fields[2].setText(prd.getQuantity() + "");
                    fields[3].setText(prd.getMinimum() + "");
                    fields[4].setText(prd.getMaximum() + "");
                    fields[5].setText(prd.getBarcode());
                    fields[5].setEditable(false);
                    positionChoice.add(prd.getCategory());
                    LocationChoice.add(prd.getLocation());
                    jButton1.setVisible(false);
                } else {
                    JOptionPane.showMessageDialog(null, "No prodduct with that id hase been found", "No results",
                            JOptionPane.ERROR_MESSAGE);
                }
                break;
            case "machines":
                Machine mach = machCtrl.getItem(id);
                if (mach != null) {
                    show = true;
                    necess = id;
                    fields[0].setText(mach.getName());
                    fields[1].setText(mach.getPrice() + "");
                    fields[2].setText(mach.getQuantity() + "");
                    fields[3].setText(mach.getBarcode());
                    fields[3].setEditable(false);
                    //fields[4].setText;
                    positionChoice.add(mach.getCategory());
                } else {
                    JOptionPane.showMessageDialog(null, "No machine with that id hase been found", "No results",
                            JOptionPane.ERROR_MESSAGE);
                }
                break;
        }
        if (show == true) {
            show(str);
        }
    }

    private void setText(Person pers) {
        fields[0].setText(pers.getName());
        fields[1].setText(pers.getAddress());
        fields[2].setText(pers.getPhone());
        fields[3].setText(pers.getEmail());
        additionalField.setText(pers.getID());
    }

    private void saveChangesToPerson(String id) {
        psCtrl = new PersonCtrl();
        ArrayList lis = new ArrayList();
        String fileName = null;

        Person ps = psCtrl.findPerson(id, employees);
        lis = employees;
        fileName = empCtrl.getFileName();

        if (ps == null) {
            ps = psCtrl.findPerson(id, customers);
            lis = customers;
            fileName = custCtrl.getFileName();
        }
        if (ps == null) {
            ps = psCtrl.findPerson(id, contractors);
            lis = contractors;
            fileName = contCtrl.getFileName();
        }
        if (!fields[0].getText().equals(ps.getName())) {
            empCtrl.changeName(id, fields[0].getText(), lis);
        }
        if (!fields[1].getText().equals(ps.getAddress())) {
            empCtrl.changeAddress(id, fields[1].getText(), lis);
        }
        if (!fields[2].getText().equals(ps.getPhone())) {
            empCtrl.changePhone(id, fields[2].getText(), lis);
        }
        if (!fields[3].getText().equals(ps.getEmail())) {
            empCtrl.changeEmail(id, fields[3].getText(), lis);
        }
        psCtrl.save(fileName, lis);
    }

    private void saveChangesToCustomer(String id) {
        saveChangesToPerson(id);
        Customer cust = custCtrl.findCustomer(id);
        if (!fields[5].getText().equals(cust.getBalance())) {
            custCtrl.changeBalance(id, Double.parseDouble(fields[5].getText()));
        }
        if (!fields[6].getText().equals(cust.getBill())) {
            custCtrl.changeBill(id, Double.parseDouble(fields[6].getText()));
        }
        if (!fields[4].getText().equals(cust.getCreditCardNo())) {
            custCtrl.changeCreditCardNo((id), fields[4].getText());
        }
        if (!positionChoice.getSelectedItem().equals(cust.getGroup())) {
            custCtrl.changeGroup(id, getGroup());
        }
        psCtrl.save(custCtrl.getFileName(), customers);
    }

    public void saveChangesToContractor(String id) {
        saveChangesToPerson(id);
        psCtrl.save(contCtrl.getFileName(), contCtrl.getContractors());
    }

    private void saveChangesToEmployee(String id) {
        saveChangesToPerson(id);
        Employee emp = empCtrl.findEmployee(id);
        if (!fields[5].getText().equals(emp.getSalary())) {
            empCtrl.changeSalary(id, Double.parseDouble(fields[5].getText()));
        }
        if (!fields[4].getText().equals(emp.getBankAcc())) {
            empCtrl.changeBankAcc(id, fields[4].getText());
            System.out.println(fields[4].getText());
        }
        if (!positionChoice.getSelectedItem().equals(emp.getPosition())) {
            empCtrl.changePosition(id, positionChoice.getSelectedItem());
        }
        psCtrl.save(empCtrl.getFileName(), employees);
    }

    protected String getInfoLabelText() {
        String[] text = infoText.getText().split(" ");
        return text[0] + " " + text[1];
    }

    private void hideForEmployee() {
        billField.setVisible(false);
        billLabel.setVisible(false);
        LocationChoice.setVisible(false);
        additionalField.setVisible(false);
    }

    private void hideForContractor() {
        hideForEmployee();
        salaryField.setVisible(false);
        salaryLabel.setVisible(false);
        bankAccField.setVisible(false);
        bankLabel.setVisible(false);
        positionChoice.setVisible(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Registration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Choice LocationChoice;
    private javax.swing.JTextField additionalField;
    private javax.swing.JLabel additionalLabel;
    private javax.swing.JTextField addressField;
    private javax.swing.JLabel addressLabel;
    private javax.swing.JButton backButton;
    private javax.swing.JTextField bankAccField;
    private javax.swing.JLabel bankLabel;
    private javax.swing.JTextField billField;
    private javax.swing.JLabel billLabel;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel infoText;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField phoneField;
    private javax.swing.JLabel phoneLabel;
    private java.awt.Choice positionChoice;
    private javax.swing.JButton proceedButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JTextField salaryField;
    private javax.swing.JLabel salaryLabel;
    // End of variables declaration//GEN-END:variables
}
